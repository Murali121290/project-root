pipeline {
  agent any

  environment {
    SONAR_HOST_URL = credentials('SONAR_HOST_URL')
    SONAR_TOKEN = credentials('SONAR_TOKEN')
    AWS_ACCOUNT = credentials('AWS_ACCOUNT')
    AWS_REGION  = 'us-east-1'
    ECR_REPO = "${AWS_ACCOUNT}/flask-demo"
    IMAGE_TAG = "${env.BUILD_NUMBER}"
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }
    stage('SonarQube Scan') {
      steps {
        sh '''
          wget -qO- https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip > /tmp/sonar.zip
          unzip -q /tmp/sonar.zip -d /tmp
          export PATH=/tmp/sonar-scanner-*/bin:$PATH
          sonar-scanner \
            -Dsonar.projectKey=flask-demo \
            -Dsonar.sources=. \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.login=${SONAR_TOKEN}
        '''
      }
    }
    stage('Check Quality Gate') {
      steps {
        script {
          def qg = sh(script: """curl -s -u ${SONAR_TOKEN}: ${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=flask-demo | jq -r '.projectStatus.status'""", returnStdout: true).trim()
          echo "Quality Gate status: ${qg}"
          if (qg != 'OK') {
            error "Quality gate failed: ${qg}"
          }
        }
      }
    }
    stage('Build Docker & Push') {
      when { expression { currentBuild.result == null } }
      steps {
        withCredentials([usernamePassword(credentialsId: 'aws-ecr-creds', usernameVariable: 'AWS_USER', passwordVariable: 'AWS_PSW')]) {
          sh '''
            $(aws ecr get-login --no-include-email --region ${AWS_REGION})
            docker build -t flask-demo:${IMAGE_TAG} .
            docker tag flask-demo:${IMAGE_TAG} ${ECR_REPO}:${IMAGE_TAG}
            docker push ${ECR_REPO}:${IMAGE_TAG}
          '''
        }
      }
    }
    stage('Deploy to Minikube') {
      steps {
        sh '''
          kubectl set image deployment/flask-demo flask-demo=${ECR_REPO}:${IMAGE_TAG} --record || kubectl apply -f k8s/deployment.yaml
        '''
      }
    }
  }
  post {
    failure { echo "Pipeline failed. Inspect SonarQube results and application code." }
    success { echo "Pipeline succeeded. Application deployed." }
  }
}
